import { useEffect, useState } from "react"
import DataTable from 'react-data-table-component';
import { columns } from './columns';
import { getItems, deleteWithCharaters } from '../../supabase/supabaseService';
import Widget from "../Widget";
import { supabase } from "../../supabaseClient";
import { useDebounce } from "../config/debounce";
import { updateItem } from '../../supabase/supabaseService';
import { ClockLoader } from "react-spinners";
import { Toaster } from 'react-hot-toast';
import toast from 'react-hot-toast'
import { IoMdMoon } from "react-icons/io";
import { FaSun } from "react-icons/fa6";

const MainTable = () => {
	const [searchTerm, setSearchTerm] = useState('');
	const [allParticipants, setAllparticipants] = useState([])
	const [participants, setParticipants] = useState([]);
	const [columnId, setColumnId] = useState(null);
	const debouncedSearchTerm = useDebounce(searchTerm, 300);
	const [colorTheme, setColorTheme] = useState(true)
	const selectedParticipant = participants.filter((item) => item.id === columnId)
	const timeStamped = new Date().toISOString();
	const [success, setSuccess] = useState(false);
	const [loading, setLoading] = useState(false);
	const localeTimeStamped = new Date().toLocaleString()
    const conditionalRowStyles = [
        {
          when: row => row.id === columnId, // or any unique identifier
          style: {
            backgroundColor: '#fec40514',  // light green
            color: '#111111',            // darker green text
            fontWeight: 'bold',
          },
        },
      ];

	useEffect(() => {
		getItems().then(setParticipants).catch(console.error)
		getItems().then(setAllparticipants).catch(console.error)

		//for realtime update
		const channel = supabase
			.channel('custom-all-channel')
			.on(
				'postgres_changes',
				{ event: 'INSERT', schema: 'public', table: 'sat_forum_registrations' },
				(payload) => {
					setParticipants((prevData) => [payload.new, ...prevData]);
					setAllparticipants((prevData) => [payload.new, ...prevData]);
				}
			)
			.on(
				'postgres_changes',
				{ event: 'UPDATE', schema: 'public', table: 'sat_forum_registrations' },
				(payload) => {
				  setParticipants((prev) =>
					prev.map((item) =>
					  item.id === payload.new.id ? payload.new : item
					)
				  );

				  setAllparticipants((prev) =>
					prev.map((item) =>
					  item.id === payload.new.id ? payload.new : item
					)
				  );
				}
			  )
			.subscribe();

			// Cleanup on unmount
			return () => {
				supabase.removeChannel(channel);
			};

	}, []);	

	useEffect(() => {
		const search = async () => {
		  let data, error;
	
		  if (debouncedSearchTerm.trim() === '') {
			// No search term: fetch all
			({ data, error } = await supabase
			  .from('sat_forum_registrations')
			  .select('*'));
		  } else {
			// Filter by multiple fields
			({ data, error } = await supabase
			  .from('sat_forum_registrations')
			  .select('*')
			  .or(
				`first_name.ilike.%${debouncedSearchTerm}%,last_name.ilike.%${debouncedSearchTerm}%,email.ilike.%${debouncedSearchTerm}%`
			  ));
		  }
	
		  if (error) {
			console.error('Search error:', error.message);
		  } else {
			setParticipants(data);
		  }
		};
	
		search();
	  }, [debouncedSearchTerm]);

	

	const handleColumnAction = (e) => {
		if(columnId === e) {
			setColumnId(null)
		} else setColumnId(e)
	}

	const handleUpdate = (i, newData, logType) => {
		setLoading(true);
	
		setTimeout(() => {
			(async () => {
				try {
					console.log("i", i)
					const res = await updateItem(i.email, newData);
					if (res) {
						setLoading(false);
						logType === "in" ? 
							toast.success(i.first_name + " " + i.last_name + " has timed in") 
						: 
						logType === "out" ? 
							toast.success(i.first_name + " " + i.last_name + " has timed out") 
						:
						logType === "del-in" ? 
							toast.success(i.first_name + " " + i.last_name + " time-in was deleted") 
						:
						logType === "del-out" && 
							toast.success(i.first_name + " " + i.last_name + " time-out was deleted") 
						console.log("newData", newData)
					}
				} catch (error) {
					console.error('Update failed:', error);
					setLoading(false);
				}
			})();
		}, 500); // Add a delay in ms (e.g., 100ms)
	};
	
	

	const handleLogs = (i, logType) => {
		if(logType === "in") {
			handleUpdate(i, {time_in: timeStamped, formatted_timein: localeTimeStamped}, logType)
		} else if(logType === "out") {
			handleUpdate(i, {time_out: timeStamped, formatted_timeout: localeTimeStamped}, logType)
		} else if(logType === "del-in") {
			handleUpdate(i, {time_in: null, formatted_timein: null}, logType)
		} else if(logType === "del-out") {
			handleUpdate(i, {time_out: null, formatted_timeout: null}, logType)
		}
	}

	const handleBulkDeletion = async () => {
		try {
			await deleteWithCharaters()
		} catch (error) {
			console.error('Update failed:', error)
		}
	}

	console.log(searchTerm)
	return (
		<div>
			<Toaster position="top-left" reverseOrder={false} />
			<div className="flex">
				<div className={`sidebar flex flex-col justify-between w-[500px] border-r-[1px] overflow-y-scroll scrollbar-none  ${colorTheme ? "bg-[#fef9db]" : "bg-[#ffffff]"}`}>
					<div className={`h-[100vh] pl-[20px] pr-[40px] py-[40px]`}>
						<div>
							<svg width="308" height="41" viewBox="0 0 308 41" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M180.904 10.5469C180.557 10.655 180.153 10.709 179.69 10.709C179.089 10.709 178.601 10.6239 178.226 10.4534C177.85 10.2828 177.573 10.0472 177.394 9.74552C177.214 9.44438 177.119 9.08922 177.108 8.68003H174.352C174.363 9.4759 174.565 10.1807 174.958 10.7945C175.351 11.4083 175.935 11.8855 176.709 12.2267C177.483 12.5678 178.443 12.7379 179.587 12.7379C180.73 12.7379 181.704 12.5819 182.473 12.2692C183.241 11.9566 183.819 11.5134 184.206 10.9391C184.593 10.3653 184.787 9.70901 184.787 8.96966C184.787 8.23032 184.665 7.60852 184.422 7.1368C184.18 6.66508 183.85 6.29591 183.434 6.02879C183.018 5.76166 182.556 5.56007 182.048 5.4235C181.539 5.28694 181.013 5.17939 180.47 5.09935C179.684 4.96279 179.068 4.83523 178.624 4.71567C178.179 4.59612 177.87 4.43704 177.696 4.23845C177.523 4.03985 177.436 3.77523 177.436 3.44558C177.436 3.11592 177.517 2.8633 177.679 2.65271C177.841 2.44261 178.075 2.28353 178.381 2.17548C178.687 2.06743 179.054 2.01341 179.481 2.01341C179.886 2.01341 180.25 2.07043 180.573 2.18399C180.897 2.29754 181.16 2.47962 181.362 2.72974C181.564 2.97986 181.671 3.30401 181.683 3.7017H184.404C184.404 2.96285 184.205 2.31505 183.806 1.75779C183.407 1.20103 182.85 0.768824 182.133 0.46168C181.417 0.154536 180.562 0.00146484 179.568 0.00146484C178.574 0.00146484 177.672 0.155037 176.933 0.46168C176.194 0.768824 175.624 1.20353 175.226 1.76629C174.827 2.32905 174.628 3.00237 174.628 3.78674C174.628 4.33249 174.72 4.80721 174.905 5.2104C175.089 5.61409 175.367 5.95775 175.737 6.24189C176.107 6.52602 176.566 6.76463 177.115 6.95822C177.664 7.15181 178.303 7.29938 179.03 7.40143C179.596 7.50398 180.07 7.59752 180.452 7.68256C180.833 7.7681 181.136 7.87315 181.362 7.99821C181.587 8.12327 181.745 8.27684 181.838 8.45842C181.931 8.64051 181.977 8.86761 181.977 9.14024C181.977 9.50391 181.884 9.80255 181.7 10.0352C181.515 10.2683 181.249 10.4388 180.902 10.5469H180.904Z" fill="black"/>
								<path d="M189.241 8.35565H191.702C192.661 8.35565 193.499 8.19357 194.215 7.86942C194.932 7.54527 195.486 7.07655 195.879 6.46276C196.272 5.84897 196.469 5.10463 196.469 4.22922C196.469 3.39983 196.292 2.68049 195.94 2.07221C195.587 1.46442 195.059 0.992701 194.354 0.657044C193.649 0.321887 192.764 0.153809 191.702 0.153809H186.536V12.5836H189.24V8.35515L189.241 8.35565ZM193.115 2.86508C193.525 3.17222 193.73 3.65545 193.73 4.31426C193.73 4.88302 193.548 5.35424 193.184 5.72942C192.82 6.10459 192.251 6.29218 191.477 6.29218H189.241V2.40486H191.477C192.159 2.40486 192.704 2.55843 193.115 2.86508Z" fill="black"/>
								<path d="M207.407 10.3161H200.89V7.33217H206.523V5.20117H200.89V2.42187H207.373V0.153809H198.186V12.5841H207.407V10.3161Z" fill="black"/>
								<path d="M210.206 11.0667C210.767 11.6124 211.434 12.0271 212.208 12.3113C212.982 12.5954 213.843 12.7375 214.791 12.7375C215.866 12.7375 216.828 12.5529 217.677 12.1832C218.527 11.814 219.217 11.2938 219.749 10.623C220.28 9.95215 220.592 9.17378 220.685 8.28687H217.946C217.854 8.71907 217.661 9.09975 217.366 9.4294C217.071 9.75906 216.704 10.0152 216.265 10.1968C215.826 10.3788 215.335 10.4694 214.792 10.4694C214.249 10.4694 213.76 10.3843 213.327 10.2138C212.894 10.0432 212.521 9.78757 212.209 9.44641C211.897 9.10525 211.658 8.67655 211.49 8.15931C211.322 7.64207 211.239 7.04228 211.239 6.36047C211.239 5.45104 211.386 4.69268 211.68 4.0844C211.975 3.47662 212.388 3.0219 212.92 2.72026C213.451 2.41912 214.075 2.26855 214.792 2.26855C215.358 2.26855 215.858 2.35959 216.291 2.54118C216.724 2.72326 217.082 2.97588 217.366 3.30003C217.649 3.62418 217.842 4.00186 217.946 4.43406H220.685C220.581 3.53614 220.266 2.75728 219.74 2.09797C219.214 1.43866 218.529 0.924421 217.686 0.554748C216.842 0.185575 215.877 0.000488281 214.791 0.000488281C213.843 0.000488281 212.982 0.142555 212.208 0.426688C211.434 0.710821 210.767 1.12602 210.206 1.67127C209.646 2.21703 209.215 2.88184 208.915 3.6662C208.614 4.45057 208.464 5.34849 208.464 6.35997C208.464 7.37144 208.614 8.27236 208.915 9.06273C209.215 9.8531 209.646 10.5204 210.206 11.0662V11.0667Z" fill="black"/>
								<path d="M225.087 0.153809H222.383V12.5836H225.087V0.153809Z" fill="black"/>
								<path d="M236.701 10.3161H230.183V7.33217H235.817V5.20117H230.183V2.42187H236.667V0.153809H227.479V12.5841H236.701V10.3161Z" fill="black"/>
								<path d="M244.414 10.5464C244.067 10.6545 243.663 10.7085 243.201 10.7085C242.6 10.7085 242.111 10.6234 241.736 10.4529C241.36 10.2823 241.083 10.0467 240.904 9.74504C240.724 9.4439 240.629 9.08873 240.618 8.67954H237.862C237.873 9.47541 238.075 10.1802 238.469 10.794C238.861 11.4078 239.445 11.885 240.219 12.2262C240.994 12.5674 241.953 12.7374 243.097 12.7374C244.241 12.7374 245.215 12.5814 245.983 12.2687C246.751 11.9561 247.329 11.5129 247.716 10.9386C248.103 10.3648 248.297 9.70852 248.297 8.96917C248.297 8.22983 248.175 7.60804 247.933 7.13632C247.69 6.6646 247.361 6.29542 246.945 6.0283C246.529 5.76117 246.066 5.55958 245.558 5.42301C245.049 5.28645 244.523 5.1789 243.98 5.09886C243.194 4.9623 242.579 4.83474 242.134 4.71518C241.689 4.59563 241.38 4.43655 241.207 4.23796C241.033 4.03937 240.947 3.77474 240.947 3.44509C240.947 3.11543 241.028 2.86282 241.189 2.65222C241.351 2.44212 241.585 2.28304 241.891 2.17499C242.197 2.06694 242.564 2.01292 242.992 2.01292C243.396 2.01292 243.76 2.06994 244.084 2.1835C244.407 2.29705 244.67 2.47914 244.872 2.72925C245.074 2.97937 245.181 3.30352 245.193 3.70121H247.914C247.914 2.96236 247.715 2.31456 247.316 1.7573C246.918 1.20054 246.36 0.768336 245.644 0.461192C244.927 0.154048 244.072 0.000976562 243.078 0.000976562C242.084 0.000976562 241.183 0.154548 240.443 0.461192C239.704 0.768336 239.135 1.20304 238.736 1.7658C238.337 2.32857 238.138 3.00188 238.138 3.78625C238.138 4.332 238.231 4.80673 238.415 5.20991C238.6 5.6136 238.877 5.95726 239.247 6.2414C239.617 6.52553 240.076 6.76414 240.625 6.95773C241.174 7.15132 241.813 7.29889 242.541 7.40094C243.107 7.50349 243.581 7.59703 243.962 7.68207C244.343 7.76761 244.646 7.87266 244.872 7.99772C245.097 8.12278 245.256 8.27635 245.348 8.45793C245.441 8.64002 245.487 8.86713 245.487 9.13975C245.487 9.50342 245.395 9.80206 245.21 10.0347C245.025 10.2678 244.759 10.4384 244.413 10.5464H244.414Z" fill="black"/>
								<path d="M174.351 30.5652H178.078V40.6935H180.782V30.5652H184.579V28.2637H174.351V30.5652Z" fill="black"/>
								<path d="M188.877 35.442H194.511V33.3105H188.877V30.5312H195.36V28.2637H186.173V40.6935H195.395V38.4259H188.877V35.442Z" fill="black"/>
								<path d="M200.906 30.8296C201.438 30.5285 202.062 30.3779 202.778 30.3779C203.344 30.3779 203.844 30.469 204.277 30.6506C204.711 30.8326 205.069 31.0853 205.352 31.4094C205.635 31.7336 205.828 32.1112 205.933 32.5434H208.671C208.567 31.6455 208.252 30.8667 207.726 30.2073C207.201 29.548 206.516 29.0338 205.672 28.6641C204.829 28.295 203.863 28.1099 202.778 28.1099C201.83 28.1099 200.969 28.2519 200.195 28.5361C199.42 28.8202 198.753 29.2354 198.192 29.7806C197.632 30.3264 197.201 30.9912 196.901 31.7756C196.601 32.5599 196.451 33.4579 196.451 34.4693C196.451 35.4808 196.601 36.3817 196.901 37.1721C197.202 37.9625 197.632 38.6298 198.192 39.1755C198.753 39.7213 199.42 40.136 200.195 40.4201C200.969 40.7043 201.83 40.8463 202.778 40.8463C203.852 40.8463 204.814 40.6617 205.664 40.2921C206.513 39.9229 207.204 39.4027 207.735 38.7318C208.266 38.061 208.578 37.2827 208.671 36.3957H205.933C205.84 36.8279 205.647 37.2086 205.352 37.5383C205.057 37.8679 204.69 38.1241 204.251 38.3056C203.812 38.4877 203.321 38.5783 202.778 38.5783C202.235 38.5783 201.747 38.4932 201.313 38.3226C200.88 38.1521 200.507 37.8964 200.196 37.5553C199.883 37.2141 199.644 36.7854 199.476 36.2682C199.308 35.7509 199.225 35.1512 199.225 34.4693C199.225 33.5599 199.372 32.8016 199.667 32.1933C199.961 31.5855 200.375 31.1308 200.906 30.8291V30.8296Z" fill="black"/>
								<path d="M219.021 33.2085H213.075V28.2637H210.371V40.6935H213.075V35.476H219.021V40.6935H221.725V28.2637H219.021V33.2085Z" fill="black"/>
								<path d="M227.731 40.6935H230.435V35.8172H236.207V33.6517H230.435V30.5312H236.901V28.2637H227.731V40.6935Z" fill="black"/>
								<path d="M248.887 29.9345C248.326 29.3887 247.656 28.974 246.876 28.6899C246.096 28.4057 245.226 28.2637 244.267 28.2637C243.308 28.2637 242.458 28.4057 241.684 28.6899C240.909 28.974 240.242 29.3892 239.682 29.9345C239.121 30.4802 238.691 31.145 238.391 31.9294C238.09 32.7138 237.94 33.6117 237.94 34.6231C237.94 35.6346 238.09 36.5355 238.391 37.3259C238.691 38.1163 239.121 38.7836 239.682 39.3293C240.242 39.8751 240.909 40.2898 241.684 40.5739C242.458 40.8581 243.319 41.0001 244.267 41.0001C245.215 41.0001 246.093 40.8581 246.867 40.5739C247.641 40.2898 248.311 39.8751 248.878 39.3293C249.444 38.7836 249.877 38.1163 250.178 37.3259C250.478 36.536 250.628 35.6351 250.628 34.6231C250.628 33.6112 250.478 32.7138 250.178 31.9294C249.877 31.145 249.447 30.4802 248.887 29.9345ZM247.413 36.8997C247.119 37.508 246.705 37.9652 246.174 38.2724C245.643 38.5795 245.007 38.7326 244.267 38.7326C243.724 38.7326 243.236 38.6475 242.803 38.477C242.369 38.3064 241.997 38.0508 241.685 37.7096C241.373 37.3684 241.133 36.9397 240.965 36.4225C240.798 35.9052 240.714 35.3055 240.714 34.6236C240.714 33.7142 240.862 32.9559 241.156 32.3476C241.45 31.7398 241.864 31.2851 242.395 30.9834C242.927 30.6823 243.551 30.5317 244.267 30.5317C244.811 30.5317 245.304 30.6168 245.749 30.7874C246.194 30.9579 246.57 31.2166 246.876 31.5632C247.182 31.9099 247.422 32.3366 247.595 32.8418C247.769 33.3476 247.855 33.9413 247.855 34.6236C247.855 35.5331 247.708 36.2919 247.413 36.8997Z" fill="black"/>
								<path d="M262.433 33.6262C262.849 33.0974 263.057 32.4471 263.057 31.6738C263.057 31.2191 262.994 30.8099 262.867 30.4462C262.739 30.0825 262.557 29.7644 262.32 29.4912C262.083 29.2186 261.794 28.991 261.454 28.8094C261.113 28.6278 260.729 28.4913 260.301 28.4002C259.873 28.3097 259.4 28.2637 258.879 28.2637H252.448V40.6935H255.152V36.0558H258.151C258.671 36.0558 259.07 36.1214 259.347 36.2519C259.624 36.383 259.818 36.5676 259.928 36.8062C260.038 37.0448 260.093 37.3404 260.093 37.6926V39.2783C260.093 39.574 260.107 39.8471 260.136 40.0967C260.165 40.3468 260.214 40.5459 260.284 40.6935H263.005C262.901 40.4549 262.84 40.2163 262.823 39.9772C262.805 39.738 262.797 39.5054 262.797 39.2783V37.2324C262.797 36.7667 262.728 36.3715 262.589 36.0473C262.45 35.7232 262.228 35.4565 261.922 35.2459C261.615 35.0358 261.22 34.8908 260.734 34.8112V34.7087C261.451 34.5156 262.017 34.1544 262.433 33.6262H262.433ZM259.816 33.4471C259.503 33.7883 258.984 33.9588 258.255 33.9588H255.153V30.4637H258.255C258.556 30.4637 258.828 30.4952 259.07 30.5572C259.313 30.6198 259.526 30.7193 259.711 30.8559C259.896 30.9924 260.038 31.1655 260.136 31.3761C260.234 31.5867 260.284 31.8509 260.284 32.169C260.284 32.6807 260.127 33.1069 259.816 33.4476V33.4471Z" fill="black"/>
								<path d="M272.92 35.9533C272.92 36.4875 272.819 36.9452 272.617 37.3259C272.415 37.7066 272.114 37.9967 271.716 38.1953C271.317 38.3944 270.818 38.4939 270.217 38.4939C269.65 38.4939 269.168 38.3999 268.77 38.2128C268.371 38.0252 268.062 37.7411 267.842 37.3604C267.622 36.9797 267.512 36.511 267.512 35.9538V28.2642H264.826V35.9708C264.826 36.9597 265.036 37.8206 265.458 38.554C265.88 39.2873 266.492 39.8526 267.296 40.2503C268.099 40.6485 269.067 40.847 270.199 40.847C271.332 40.847 272.267 40.654 273.077 40.2673C273.885 39.8811 274.509 39.3238 274.949 38.5965C275.387 37.8692 275.607 36.9937 275.607 35.9708V28.2642H272.92V35.9538V35.9533Z" fill="black"/>
								<path d="M285.383 33.8223L284.655 36.9592H284.534L283.788 33.8223L282.09 28.2637H277.843V40.6935H280.478V34.9133L280.408 30.7528H280.547L281.639 34.6066L283.459 40.6935H285.729L287.55 34.6236L288.642 30.7528H288.763L288.694 34.9133V40.6935H291.311V28.2637H287.064L285.383 33.8223Z" fill="black"/>
								<path d="M177.879 23.8441H182.773L183.558 26.3413H186.3L182.204 14.2051H178.447L174.351 26.3413H177.093L177.878 23.8441H177.879ZM180.275 16.17H180.393L180.85 17.7347L182.144 21.8467H178.508L179.801 17.7347L180.275 16.17H180.275Z" fill="black"/>
								<path d="M192.849 14.2056H187.586V26.3417H192.849C193.763 26.3417 194.573 26.1977 195.278 25.909C195.983 25.6204 196.579 25.2097 197.064 24.677C197.549 24.1442 197.916 23.5034 198.164 22.7541C198.412 22.0047 198.536 21.1808 198.536 20.2819C198.536 19.0613 198.316 17.9958 197.876 17.0854C197.436 16.1755 196.793 15.4682 195.947 14.9629C195.1 14.4582 194.068 14.2056 192.849 14.2056ZM195.574 22.0798C195.405 22.579 195.168 22.9787 194.863 23.2783C194.559 23.578 194.198 23.7946 193.78 23.9276C193.363 24.0607 192.905 24.1272 192.409 24.1272H190.226V16.4031H192.409C193.086 16.4031 193.681 16.5252 194.195 16.7693C194.708 17.0134 195.109 17.4131 195.396 17.9678C195.684 18.5231 195.828 19.2774 195.828 20.2319C195.828 20.9642 195.744 21.5805 195.574 22.0798Z" fill="black"/>
								<path d="M204.968 24.2773H204.832L203.986 21.58L201.769 14.2056H198.824L203.14 26.3412H206.677L210.976 14.2056H208.048L205.814 21.58L204.968 24.2773Z" fill="black"/>
								<path d="M213.149 23.8441H218.043L218.828 26.3413H221.57L217.474 14.2051H213.717L209.621 26.3413H212.363L213.148 23.8441H213.149ZM215.545 16.17H215.664L216.121 17.7347L217.415 21.8467H213.778L215.072 17.7347L215.546 16.17H215.545Z" fill="black"/>
								<path d="M230.71 26.3412H233.773V14.2056H231.217V18.8998L231.336 22.6955H231.234L226.089 14.2056H222.856V26.3412H225.548V21.4635L225.446 17.9508H225.548L230.71 26.3412Z" fill="black"/>
								<path d="M241.541 26.491C242.59 26.491 243.529 26.3109 244.359 25.9502C245.188 25.5896 245.862 25.0818 246.381 24.427C246.9 23.7722 247.205 23.0119 247.295 22.1465H244.621C244.531 22.5682 244.342 22.9403 244.054 23.262C243.766 23.5841 243.408 23.8337 242.979 24.0108C242.551 24.1884 242.071 24.2774 241.541 24.2774C241.01 24.2774 240.534 24.1939 240.111 24.0278C239.688 23.8613 239.323 23.6116 239.019 23.279C238.714 22.9458 238.48 22.5271 238.316 22.0219C238.153 21.5172 238.071 20.9314 238.071 20.2656C238.071 19.3777 238.215 18.6368 238.503 18.043C238.79 17.4493 239.194 17.0055 239.712 16.7114C240.231 16.4173 240.84 16.2702 241.54 16.2702C242.093 16.2702 242.581 16.3592 243.004 16.5363C243.427 16.7139 243.777 16.961 244.054 17.2772C244.33 17.5933 244.519 17.9625 244.621 18.3842H247.295C247.193 17.5078 246.886 16.7474 246.372 16.1036C245.858 15.4603 245.19 14.9576 244.366 14.5969C243.542 14.2362 242.601 14.0557 241.54 14.0557C240.615 14.0557 239.774 14.1947 239.018 14.4719C238.262 14.7495 237.61 15.1542 237.063 15.6869C236.516 16.2197 236.095 16.869 235.802 17.6348C235.509 18.4007 235.362 19.2776 235.362 20.2651C235.362 21.2525 235.509 22.1324 235.802 22.9038C236.096 23.6752 236.516 24.327 237.063 24.8597C237.61 25.3925 238.262 25.7977 239.018 26.0753C239.774 26.3524 240.614 26.4915 241.54 26.4915L241.541 26.491Z" fill="black"/>
								<path d="M257.772 24.1272H251.408V21.2138H256.909V19.1329H251.408V16.4196H257.737V14.2056H248.768V26.3412H257.772V24.1272Z" fill="black"/>
								<path d="M261.917 20.6981L261.849 16.6357H261.985L263.051 20.398L264.828 26.3412H267.045L268.822 20.415L269.889 16.6357H270.007L269.939 20.6981V26.3412H272.495V14.2056H268.348L266.707 19.6326L265.996 22.6955H265.877L265.149 19.6326L263.491 14.2056H259.344V26.3412H261.917V20.6981Z" fill="black"/>
								<path d="M283.648 24.1272H277.285V21.2138H282.785V19.1329H277.285V16.4196H283.615V14.2056H274.645V26.3412H283.648V24.1272Z" fill="black"/>
								<path d="M293.583 18.8998L293.701 22.6955H293.6L288.455 14.2056H285.222V26.3412H287.913V21.4635L287.812 17.9508H287.913L293.075 26.3412H296.138V14.2056H293.583V18.8998Z" fill="black"/>
								<path d="M307.477 14.2056H297.492V16.4526H301.13V26.3412H303.771V16.4526H307.477V14.2056Z" fill="black"/>
								<path d="M36.7249 13.7815L42.5178 0H15.8527C11.6246 0 7.7804 1.7013 4.99402 4.44258C3.29392 6.11486 1.98642 8.17433 1.22613 10.4704C0.740462 11.9376 0.477539 13.5018 0.477539 15.1231C0.477539 19.8968 2.75638 24.1723 6.29644 26.9481L0.507544 40.7176H27.1518C29.9997 40.7176 32.6722 39.9457 34.9658 38.6046C35.0614 38.5485 35.1555 38.492 35.2495 38.4345C36.2524 37.8192 37.179 37.0934 38.011 36.275C39.7111 34.6022 41.0181 32.5427 41.7789 30.2467C42.2646 28.7795 42.5275 27.2152 42.5275 25.5945C42.5275 20.8283 40.2558 16.5593 36.7249 13.782V13.7815Z" fill="#0035E6"/>
								<path d="M119.928 0H81.5425H79.7412V14.2952H81.5425H92.9087V40.7176H93.4687H108.002H108.562V14.2952H119.928H121.729V0H119.928Z" fill="#FEC205"/>
								<path d="M165.689 14.2952V0H158.338H125.128H123.701V8.05027V10.9366V14.2952V16.8384V31.1336V40.7176H136.704H138.221H139.354V31.1611H158.338V31.1336H165.689V16.8384H139.354V14.2952H165.689Z" fill="#EF1748"/>
								<path d="M47.705 35.6687H47.6369C46.1804 36.9508 45.0112 36.4125 44.6791 35.5001C43.7332 35.3856 43.1204 34.5597 43.9158 33.5362C43.6401 34.4336 43.9681 35.0109 44.5891 35.0819C44.5621 34.7338 44.6491 34.3651 44.8734 34.0394C45.9418 32.4877 47.8052 34.4811 45.7318 35.344C45.5782 35.4081 45.4231 35.4531 45.2711 35.4806C45.6403 35.9748 46.5348 36.0749 47.5662 34.8748L47.6007 34.8578C46.9895 27.2102 56.0158 16.2516 72.2316 19.4416C73.5727 18.9704 74.6529 18.2796 75.1721 17.1175C75.5378 17.8203 75.5688 18.4486 75.4803 19.0499C76.06 18.4882 76.8137 18.1885 77.753 18.166C77.0512 19.212 77.1514 21.0413 75.8785 21.3995C76.1287 21.7327 76.3194 22.0658 76.4181 22.3985C76.8092 23.7221 77.96 25.8326 79.5706 25.8326H80.5262C80.6015 26.8881 80.4057 27.6404 79.9561 28.1092C79.5152 28.5694 77.9407 28.4223 77.2775 28.4468C75.4778 29.3377 73.6078 29.7239 71.7048 29.874C69.3863 32.0825 68.8935 35.6157 70.5631 40.7181H88.8726L71.7566 0H56.0545L38.9375 40.7176H51.4363C49.3105 39.6701 48.0885 37.8392 47.7045 35.6687H47.705Z" fill="#3EAD35"/>
								<path d="M45.3121 34.2824C45.1331 34.524 45.069 34.7936 45.098 35.0387C45.2424 35.0022 45.3945 34.9452 45.5526 34.8656C46.7839 34.2484 45.9224 33.459 45.3121 34.2819V34.2824Z" fill="#3EAD35"/>
								<path d="M68.0358 26.596C68.3109 26.5785 68.5866 26.561 68.8617 26.5435C68.6262 26.2233 68.3908 25.9027 68.1558 25.5825C68.6755 23.9928 66.9103 23.7677 65.8322 24.2579C66.1185 24.401 66.3682 24.7131 66.413 24.9982C64.4372 25.554 63.7075 27.2793 62.4722 28.4368C59.7845 30.954 55.0666 27.0547 53.305 25.0508C53.0695 25.483 53.0029 25.9157 53.1193 26.3489C52.7664 26.2758 52.4897 26.0397 52.209 25.8161C52.1826 26.4004 52.2756 26.9506 52.592 27.4399C52.2558 27.3763 51.9771 27.1637 51.6938 26.9596C51.7839 27.617 52.0524 28.1762 52.4597 28.6599C52.2131 28.7015 51.9669 28.6459 51.7203 28.5564C51.9776 29.4353 52.4607 30.1231 53.159 30.6214C52.8651 30.6094 52.5696 30.5513 52.2741 30.4913C52.6418 31.2547 53.1656 31.7984 53.8059 32.1796H52.8422C53.3807 32.7474 53.9976 33.161 54.677 33.4517C54.5092 33.5312 54.3373 33.5857 54.1619 33.6208C54.5016 33.9514 54.8688 34.16 55.2598 34.2651C55.653 33.7203 56.1824 33.3151 56.8593 33.1611C57.0347 33.1205 57.2168 33.101 57.3988 33.101C57.9496 33.101 58.5044 33.2791 59.0374 33.6228C59.6588 32.9555 60.4349 32.5157 61.333 32.5157C62.2311 32.5157 63.0306 32.969 63.6566 33.6513C64.2038 33.2921 64.781 33.1 65.3404 33.1C65.5245 33.1 65.7066 33.1205 65.8831 33.1611C66.3581 33.2691 66.7842 33.5137 67.1453 33.8784C67.957 33.1205 68.4228 31.8835 68.3252 29.8675C68.1197 29.9681 67.9122 30.0621 67.6915 30.0881C68.2977 29.3488 68.4386 28.5649 67.5994 27.687C68.6583 27.9261 68.6272 27.1322 68.0348 26.596H68.0358Z" fill="#3EAD35"/>
								<path d="M63.915 36.3292C63.6785 35.5869 63.2945 34.8735 62.817 34.3638C62.3852 33.9021 61.8777 33.6069 61.334 33.6069C60.7904 33.6069 60.3093 33.8841 59.8841 34.3233C59.0506 35.1847 58.4912 36.6679 58.4912 37.8939C58.4912 37.999 58.4968 38.1025 58.509 38.2051C58.6265 39.2491 59.3283 40.119 60.2854 40.4927C60.4542 40.5602 60.6317 40.6107 60.8148 40.6432C60.9836 40.6737 61.1566 40.6902 61.3345 40.6902C61.7053 40.6902 62.0592 40.6202 62.3837 40.4937C62.4061 40.4852 62.4295 40.4761 62.4513 40.4661C63.4669 40.0404 64.1789 39.049 64.1789 37.8934C64.1789 37.3987 64.0843 36.856 63.916 36.3287L63.915 36.3292ZM58.9942 38.4137C58.7333 37.0595 59.577 35.5483 59.577 35.5483C59.1116 36.8409 59.1106 37.8184 59.2505 38.5032C59.4148 39.3081 59.7733 39.7078 59.8013 39.7383C59.3273 39.3701 59.0888 38.9019 58.9942 38.4137Z" fill="#3EAD35"/>
								<path d="M63.915 36.3292C63.6785 35.5869 63.2945 34.8735 62.817 34.3638C62.3852 33.9021 61.8777 33.6069 61.334 33.6069C60.7904 33.6069 60.3093 33.8841 59.8841 34.3233C59.0506 35.1847 58.4912 36.6679 58.4912 37.8939C58.4912 37.999 58.4968 38.1025 58.509 38.2051C58.6265 39.2491 59.3283 40.119 60.2854 40.4927C60.4542 40.5602 60.6317 40.6107 60.8148 40.6432C60.9836 40.6737 61.1566 40.6902 61.3345 40.6902C61.7053 40.6902 62.0592 40.6202 62.3837 40.4937C62.4061 40.4852 62.4295 40.4761 62.4513 40.4661C63.4669 40.0404 64.1789 39.049 64.1789 37.8934C64.1789 37.3987 64.0843 36.856 63.916 36.3287L63.915 36.3292ZM58.9942 38.4137C58.7333 37.0595 59.577 35.5483 59.577 35.5483C59.1116 36.8409 59.1106 37.8184 59.2505 38.5032C59.4148 39.3081 59.7733 39.7078 59.8013 39.7383C59.3273 39.3701 59.0888 38.9019 58.9942 38.4137Z" fill="#3EAD35"/>
								<path d="M57.3977 37.4956C57.4729 36.5261 57.8162 35.4241 58.3766 34.5037C57.9617 34.248 57.5243 34.13 57.1098 34.224C56.558 34.3486 56.1375 34.8258 55.8618 35.4501C55.4855 36.3005 55.3802 37.4255 55.5877 38.3089C55.8598 39.4655 56.9456 40.2283 58.1122 40.1458C57.6514 39.5105 57.3809 38.7326 57.3809 37.8943C57.3809 37.7642 57.3865 37.6311 57.3977 37.4956ZM57.8025 39.7581C55.0125 39.2874 56.0073 36.1119 56.0073 36.1119C55.5633 39.1313 57.5228 39.6936 57.8025 39.7581Z" fill="#3EAD35"/>
								<path d="M57.3977 37.4956C57.4729 36.5261 57.8162 35.4241 58.3766 34.5037C57.9617 34.248 57.5243 34.13 57.1098 34.224C56.558 34.3486 56.1375 34.8258 55.8618 35.4501C55.4855 36.3005 55.3802 37.4255 55.5877 38.3089C55.8598 39.4655 56.9456 40.2283 58.1122 40.1458C57.6514 39.5105 57.3809 38.7326 57.3809 37.8943C57.3809 37.7642 57.3865 37.6311 57.3977 37.4956ZM57.8025 39.7581C55.0125 39.2874 56.0073 36.1119 56.0073 36.1119C55.5633 39.1313 57.5228 39.6936 57.8025 39.7581Z" fill="#3EAD35"/>
								<path d="M65.1494 34.6559C65.1494 34.6559 64.9053 34.7019 64.5432 34.955C64.5289 34.9275 64.5142 34.9005 64.501 34.873C64.7197 34.7429 64.9505 34.6469 65.1494 34.6559Z" fill="#3EAD35"/>
								<path d="M67.1564 38.3095C66.8787 39.4901 65.7543 40.2599 64.5607 40.1399C65.0179 39.5056 65.288 38.7302 65.288 37.8948C65.288 37.211 65.1379 36.4306 64.8582 35.6803C64.7672 35.4337 64.6619 35.1911 64.5429 34.9554C64.905 34.7023 65.1491 34.6563 65.1491 34.6563C64.9503 34.6478 64.7194 34.7438 64.5007 34.8734C64.4397 34.7589 64.3766 34.6453 64.311 34.5347C64.7428 34.2586 65.2015 34.1266 65.6343 34.2246C65.9232 34.2901 66.1759 34.4527 66.3915 34.6843C67.1452 35.4947 67.4315 37.137 67.1564 38.3095Z" fill="#3EAD35"/>
								<path d="M67.1564 38.3095C66.8787 39.4901 65.7543 40.2599 64.5607 40.1399C65.0179 39.5056 65.288 38.7302 65.288 37.8948C65.288 37.211 65.1379 36.4306 64.8582 35.6803C64.7672 35.4337 64.6619 35.1911 64.5429 34.9554C64.905 34.7023 65.1491 34.6563 65.1491 34.6563C64.9503 34.6478 64.7194 34.7438 64.5007 34.8734C64.4397 34.7589 64.3766 34.6453 64.311 34.5347C64.7428 34.2586 65.2015 34.1266 65.6343 34.2246C65.9232 34.2901 66.1759 34.4527 66.3915 34.6843C67.1452 35.4947 67.4315 37.137 67.1564 38.3095Z" fill="#3EAD35"/>
							</svg>
							<div className="pt-[20px] flex flex-col gap-[10px]">
								<div>
									<Widget
										title="Total Registered Participants"
										logo="BI"
										figure={allParticipants.length}
										type="text"
										colorTheme={colorTheme}
									/>
								</div>
								<div>
									<Widget
										title="Current Logged In Participants"
										logo="BI"
										figure={allParticipants.filter((item) => item.time_in !== null).length}
										type="text"
										colorTheme={colorTheme}
									/>
								</div>
							</div>
							<div className="pt-[20px]">
								{
									!columnId ? 
										<div className={`text-[14px] ${colorTheme ? "text-[#fff]" : "text-[#000000]"}`}>
											<div className="text-[14px] font-[700]">
												<div className={`${colorTheme ? "bg-[#174e35]" : "bg-[#f2f2f2]"} px-[20px] py-[20px]`}>
													<div className="flex gap-[10px]">
														<div className={`cursor-pointer flex rounded-[4px] justify-center ${colorTheme ? "bg-[#08312a]" : "bg-[#cacaca]"} px-[20px] w-[100%] py-[5px]`}> 
															<p className={`${colorTheme ? "text-[#19473e]" : "text-[#fff]"}`}>Time In</p>
														</div>
														<div className={`cursor-pointer flex rounded-[4px] justify-center ${colorTheme ? "bg-[#08312a]" : "bg-[#cacaca]"} px-[20px] w-[100%] py-[5px]`}> 
															<p className={`${colorTheme ? "text-[#19473e]" : "text-[#fff]"}`}>Time Out</p>
														</div>
													</div>
													<div className="flex justify-center pt-[20px]">
														<p>No Selected Participant</p>
													</div>
												</div>
											</div>
										</div> 
									:
										selectedParticipant.map(i => (
											<div key={"selc-participant" + i.id} className={`text-[14px] ${colorTheme ? "text-[#dbdbdb]" : "text-[#000000]"}`}>
												<div className={`${colorTheme ? "bg-[#174e35]" : "bg-[#f2f2f2]"} py-[20px] rounded-[8px]`}>
													<>
														<div className="px-[20px]">
															<div className="flex gap-[10px] pb-[20px]">
																{
																	loading ? 
																		<div className="w-[100%] flex justify-center"><ClockLoader color="#00e47c"/></div> 
																	:
																	<>
																		<div onClick={() => handleLogs(i, "in")} className="cursor-pointer flex rounded-[4px] justify-center bg-[#dbdbdb] hover:bg-[#00e47c] px-[20px] w-[100%] py-[5px]"> 
																			<p className="group-hover:text-[#000000] text-[#08312a]">Time In</p>
																		</div>
																		<div onClick={() => handleLogs(i, "out")} className="cursor-pointer flex rounded-[4px] justify-center bg-[#dbdbdb] hover:bg-[#00e47c] px-[20px] w-[100%] py-[5px]"> 
																			<p className="group-hover:text-[#000000] text-[#08312a]">Time Out</p>
																		</div>
																	</>
																}
															</div>
															<div className="pt-[10px]">
																<div className="py-[10px] text-[14px] font-[700]">
																	<p>Participant's Details</p>
																</div>
																<div className="flex flex-col gap-[10px]">
																	<div>
																		<h6 className="font-[300] text-[12px] text-[#fff]">Participant :</h6>
																		<h6 className="font-[700] text-[16px]">{i.first_name} {i.middle_name} {i.last_name}</h6>
																	</div>
																	<div>
																		<p className="font-[300] text-[12px] text-[#fff]">ID :</p>
																		<p className="font-[700] text-[16px]">{i.id}</p>
																	</div>
																	<div>
																		<p className="font-[300] text-[12px] text-[#fff]">Email :</p>
																		<p className="font-[700] text-[16px]">{i.email}</p>
																	</div>
																</div>
															</div>
														</div>

														<div className="pt-[20px] space-y-4">
															{/* <div className="group">
																<div onClick={() => handleLogs(i, "del-in")} className="cursor-pointer px-[20px] group-hover:bg-[#EF1748] w-[100%] py-[5px]"> 
																	<p className={`group-hover:text-[#fff] ${colorTheme ? "text-[#dbdbdb]" : "text-[#fff]"}`}>Delete Time In</p>
																</div>
															</div> */}
															<div className="group w-[60%] px-4">
																<div
																	onClick={() => handleLogs(i, "del-in")}
																	className={`cursor-pointer px-[20px] py-[5px] w-full bg-[#EF1748]/50 border border-[#EF1748] rounded-md transition duration-200 group-hover:bg-[#EF1748]`}
																>
																	<p
																	className={`text-center group-hover:text-white ${
																		colorTheme ? 'text-[#dbdbdb]' : 'text-white'
																	}`}
																	>
																	Delete Time In
																	</p>
																</div>
															</div>
															<div className="group w-[60%] px-4">
																<div
																	onClick={() => handleLogs(i, "del-out")}
																	className={`cursor-pointer px-[20px] py-[5px] w-full bg-[#EF1748]/50 border border-[#EF1748] rounded-md transition duration-200 group-hover:bg-[#EF1748]`}
																>
																	<p
																	className={`text-center group-hover:text-white ${
																		colorTheme ? 'text-[#dbdbdb]' : 'text-white'
																	}`}
																	>
																	Delete Time Out
																	</p>
																</div>
															</div>
															{/* <div className="group">
																<div onClick={() => handleBulkDeletion()} className="cursor-pointer px-[20px] group-hover:bg-[#00e47c] w-[100%] py-[5px]"> 
																	<p className={`text-[red] font-[700]`}>Bulk Delete</p>
																</div>
															</div> */}
														</div>
													</>
												</div>
											</div>
										))
								}			
							</div>
						</div>
						<div className="w-[100%] flex justify-end pt-[50px] pb-[50px]">
							<div onClick={() => setColorTheme(!colorTheme)} className={`cursor-pointer w-[60px] h-[30px] ${colorTheme ? "bg-[#00e47c]" : "bg-[#cacaca]"} rounded-full flex items-center relative`}>
								<div className={`h-[28px] w-[28px] ${colorTheme ? "bg-[#08312A]" : "bg-[#ffffff]"} rounded-full absolute ${colorTheme ? 'left-[2px]' : 'left-[30px]'} transition-all duration-200 ease`}>
									<div className="z-[99] flex justify-center items-center w-[100%] h-[100%]">
										{ colorTheme ? <IoMdMoon color="#00e47c"/> : <FaSun color="#000000"/>}
									</div>	
								</div>			
							</div>
						</div>
					</div>
				</div>
				<div className={`w-[100%] pt-[20px] pl-[50px] pr-[20px] h-[100vh] overflow-y-scroll ${colorTheme ? "bg-[#fff]" : "bg-[#ffffff]"}`}>
					<div className="mb-[20px]">
						<input 
							className={`${colorTheme ? "bg-[#f2f2f2]" : "bg-[#f2f2f2]"} w-[100%] py-[10px] pr-[10px] pl-[20px] ${colorTheme ? "text-[#000000]" : "text-[#000000]"}`} type="text" placeholder="Enter Keyword" 
							value={searchTerm}
        					onChange={(e) => setSearchTerm(e.target.value)}
						/>
					</div>
					<DataTable
						highlightOnHover
						columns={
							columns({
								columnId: columnId,
								setColumnId: (e) => handleColumnAction(e)
							})
						}
						data={participants}
						striped //how to customized this
						theme={colorTheme ? null : null}
						pagination
						onRowClicked={row => setColumnId(row.id)}
  						conditionalRowStyles={conditionalRowStyles}
					/>
				</div>
			</div>
		</div>
	);
};

export default MainTable